// Stub for optional TSL imports in three/globe.gl
export const Fn = (...args) => args[0];
export const If = (...args) => args[0];
export const uniform = (..._args) => 0;
export const float = (v) => Number(v);
export const int = (v) => (v|0);
export const vec2 = (x,y) => [x,y];
export const vec3 = (x,y,z) => [x,y,z];
export const vec4 = (x,y,z,w) => [x,y,z,w];
export const add = (a,b)=> (Array.isArray(a)? a.map((v,i)=>v+(b[i]??0)) : a+b);
export const sub = (a,b)=> (Array.isArray(a)? a.map((v,i)=>v-(b[i]??0)) : a-b);
export const mul = (a,b)=> (Array.isArray(a)? a.map((v,i)=>v*(b[i]??1)) : a*b);
export const div = (a,b)=> (Array.isArray(a)? a.map((v,i)=>v/(b[i]??1)) : a/b);
export const sqrt = (x)=>x;
export const sin = (x)=>x;
export const cos = (x)=>x;
export const tan = (x)=>x;
export const abs = (x)=> (Array.isArray(x)? x.map(Math.abs) : Math.abs(x));
export const max = (a,b)=> (Array.isArray(a)? a.map((v,i)=>Math.max(v,b[i]??b)) : Math.max(a,b));
export const min = (a,b)=> (Array.isArray(a)? a.map((v,i)=>Math.min(v,b[i]??b)) : Math.min(a,b));
export const clamp = (x,lo,hi)=> Math.max(lo, Math.min(hi, x));
export const step = (edge, x)=> x<edge?0:1;
export const length = (v)=> Array.isArray(v)? Math.hypot(...v): Math.abs(v);
export const dot = (a,b)=> Array.isArray(a)? a.reduce((s,v,i)=>s+v*(b[i]??0),0): a*b;
export const mix = (a,b,t)=> add(mul(a, (1-t)), mul(b, t));
export const normalize = (v)=>{ const L = length(v)||1; return v.map(x=>x/L); };
export function instanceIndex(){ return 0; }
export const storage = (...args)=>args[0];
export const Loop = (...args)=>args[0];
export default {};
